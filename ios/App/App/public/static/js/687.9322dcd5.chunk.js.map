{"version":3,"file":"static/js/687.9322dcd5.chunk.js","mappings":"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","sources":["../node_modules/@ionic/core/components/index8.js","../node_modules/@ionic/core/components/input-shims.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { c as componentOnReady } from './helpers.js';\nimport { b as printRequiredElementError } from './index7.js';\n\nconst ION_CONTENT_TAG_NAME = 'ION-CONTENT';\nconst ION_CONTENT_ELEMENT_SELECTOR = 'ion-content';\nconst ION_CONTENT_CLASS_SELECTOR = '.ion-content-scroll-host';\n/**\n * Selector used for implementations reliant on `<ion-content>` for scroll event changes.\n *\n * Developers should use the `.ion-content-scroll-host` selector to target the element emitting\n * scroll events. With virtual scroll implementations this will be the host element for\n * the scroll viewport.\n */\nconst ION_CONTENT_SELECTOR = `${ION_CONTENT_ELEMENT_SELECTOR}, ${ION_CONTENT_CLASS_SELECTOR}`;\nconst isIonContent = (el) => el.tagName === ION_CONTENT_TAG_NAME;\n/**\n * Waits for the element host fully initialize before\n * returning the inner scroll element.\n *\n * For `ion-content` the scroll target will be the result\n * of the `getScrollElement` function.\n *\n * For custom implementations it will be the element host\n * or a selector within the host, if supplied through `scrollTarget`.\n */\nconst getScrollElement = async (el) => {\n  if (isIonContent(el)) {\n    await new Promise((resolve) => componentOnReady(el, resolve));\n    return el.getScrollElement();\n  }\n  return el;\n};\n/**\n * Queries the element matching the selector for IonContent.\n * See ION_CONTENT_SELECTOR for the selector used.\n */\nconst findIonContent = (el) => {\n  /**\n   * First we try to query the custom scroll host selector in cases where\n   * the implementation is using an outer `ion-content` with an inner custom\n   * scroll container.\n   */\n  const customContentHost = el.querySelector(ION_CONTENT_CLASS_SELECTOR);\n  if (customContentHost) {\n    return customContentHost;\n  }\n  return el.querySelector(ION_CONTENT_SELECTOR);\n};\n/**\n * Queries the closest element matching the selector for IonContent.\n */\nconst findClosestIonContent = (el) => {\n  return el.closest(ION_CONTENT_SELECTOR);\n};\n/**\n * Scrolls to the top of the element. If an `ion-content` is found, it will scroll\n * using the public API `scrollToTop` with a duration.\n */\n// TODO(FW-2832): type\nconst scrollToTop = (el, durationMs) => {\n  if (isIonContent(el)) {\n    const content = el;\n    return content.scrollToTop(durationMs);\n  }\n  return Promise.resolve(el.scrollTo({\n    top: 0,\n    left: 0,\n    behavior: durationMs > 0 ? 'smooth' : 'auto',\n  }));\n};\n/**\n * Scrolls by a specified X/Y distance in the component. If an `ion-content` is found, it will scroll\n * using the public API `scrollByPoint` with a duration.\n */\nconst scrollByPoint = (el, x, y, durationMs) => {\n  if (isIonContent(el)) {\n    const content = el;\n    return content.scrollByPoint(x, y, durationMs);\n  }\n  return Promise.resolve(el.scrollBy({\n    top: y,\n    left: x,\n    behavior: durationMs > 0 ? 'smooth' : 'auto',\n  }));\n};\n/**\n * Prints an error informing developers that an implementation requires an element to be used\n * within either the `ion-content` selector or the `.ion-content-scroll-host` class.\n */\nconst printIonContentErrorMsg = (el) => {\n  return printRequiredElementError(el, ION_CONTENT_ELEMENT_SELECTOR);\n};\n/**\n * Several components in Ionic need to prevent scrolling\n * during a gesture (card modal, range, item sliding, etc).\n * Use this utility to account for ion-content and custom content hosts.\n */\nconst disableContentScrollY = (contentEl) => {\n  if (isIonContent(contentEl)) {\n    const ionContent = contentEl;\n    const initialScrollY = ionContent.scrollY;\n    ionContent.scrollY = false;\n    /**\n     * This should be passed into resetContentScrollY\n     * so that we can revert ion-content's scrollY to the\n     * correct state. For example, if scrollY = false\n     * initially, we do not want to enable scrolling\n     * when we call resetContentScrollY.\n     */\n    return initialScrollY;\n  }\n  else {\n    contentEl.style.setProperty('overflow', 'hidden');\n    return true;\n  }\n};\nconst resetContentScrollY = (contentEl, initialScrollY) => {\n  if (isIonContent(contentEl)) {\n    contentEl.scrollY = initialScrollY;\n  }\n  else {\n    contentEl.style.removeProperty('overflow');\n  }\n};\n\nexport { ION_CONTENT_ELEMENT_SELECTOR as I, findClosestIonContent as a, ION_CONTENT_CLASS_SELECTOR as b, scrollByPoint as c, disableContentScrollY as d, findIonContent as f, getScrollElement as g, isIonContent as i, printIonContentErrorMsg as p, resetContentScrollY as r, scrollToTop as s };\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { g as getScrollElement, c as scrollByPoint, a as findClosestIonContent } from './index8.js';\nimport { a as addEventListener, b as removeEventListener, r as raf, p as pointerCoord, c as componentOnReady } from './helpers.js';\n\nconst cloneMap = new WeakMap();\nconst relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0, disabledClonedInput = false) => {\n  if (cloneMap.has(componentEl) === shouldRelocate) {\n    return;\n  }\n  if (shouldRelocate) {\n    addClone(componentEl, inputEl, inputRelativeY, disabledClonedInput);\n  }\n  else {\n    removeClone(componentEl, inputEl);\n  }\n};\n// TODO(FW-2832): type\nconst isFocused = (input) => {\n  return input === input.getRootNode().activeElement;\n};\nconst addClone = (componentEl, inputEl, inputRelativeY, disabledClonedInput = false) => {\n  // this allows for the actual input to receive the focus from\n  // the user's touch event, but before it receives focus, it\n  // moves the actual input to a location that will not screw\n  // up the app's layout, and does not allow the native browser\n  // to attempt to scroll the input into place (messing up headers/footers)\n  // the cloned input fills the area of where native input should be\n  // while the native input fakes out the browser by relocating itself\n  // before it receives the actual focus event\n  // We hide the focused input (with the visible caret) invisible by making it scale(0),\n  const parentEl = inputEl.parentNode;\n  // DOM WRITES\n  const clonedEl = inputEl.cloneNode(false);\n  clonedEl.classList.add('cloned-input');\n  clonedEl.tabIndex = -1;\n  /**\n   * Making the cloned input disabled prevents\n   * Chrome for Android from still scrolling\n   * the entire page since this cloned input\n   * will briefly be hidden by the keyboard\n   * even though it is not focused.\n   *\n   * This is not needed on iOS. While this\n   * does not cause functional issues on iOS,\n   * the input still appears slightly dimmed even\n   * if we set opacity: 1.\n   */\n  if (disabledClonedInput) {\n    clonedEl.disabled = true;\n  }\n  parentEl.appendChild(clonedEl);\n  cloneMap.set(componentEl, clonedEl);\n  const doc = componentEl.ownerDocument;\n  const tx = doc.dir === 'rtl' ? 9999 : -9999;\n  componentEl.style.pointerEvents = 'none';\n  inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\n};\nconst removeClone = (componentEl, inputEl) => {\n  const clone = cloneMap.get(componentEl);\n  if (clone) {\n    cloneMap.delete(componentEl);\n    clone.remove();\n  }\n  componentEl.style.pointerEvents = '';\n  inputEl.style.transform = '';\n};\n\nconst enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\n  if (!scrollEl || !inputEl) {\n    return () => {\n      return;\n    };\n  }\n  const scrollHideCaret = (shouldHideCaret) => {\n    if (isFocused(inputEl)) {\n      relocateInput(componentEl, inputEl, shouldHideCaret);\n    }\n  };\n  const onBlur = () => relocateInput(componentEl, inputEl, false);\n  const hideCaret = () => scrollHideCaret(true);\n  const showCaret = () => scrollHideCaret(false);\n  addEventListener(scrollEl, 'ionScrollStart', hideCaret);\n  addEventListener(scrollEl, 'ionScrollEnd', showCaret);\n  inputEl.addEventListener('blur', onBlur);\n  return () => {\n    removeEventListener(scrollEl, 'ionScrollStart', hideCaret);\n    removeEventListener(scrollEl, 'ionScrollEnd', showCaret);\n    inputEl.removeEventListener('blur', onBlur);\n  };\n};\n\nconst SKIP_SELECTOR = 'input, textarea, [no-blur], [contenteditable]';\nconst enableInputBlurring = () => {\n  let focused = true;\n  let didScroll = false;\n  const doc = document;\n  const onScroll = () => {\n    didScroll = true;\n  };\n  const onFocusin = () => {\n    focused = true;\n  };\n  const onTouchend = (ev) => {\n    // if app did scroll return early\n    if (didScroll) {\n      didScroll = false;\n      return;\n    }\n    const active = doc.activeElement;\n    if (!active) {\n      return;\n    }\n    // only blur if the active element is a text-input or a textarea\n    if (active.matches(SKIP_SELECTOR)) {\n      return;\n    }\n    // if the selected target is the active element, do not blur\n    const tapped = ev.target;\n    if (tapped === active) {\n      return;\n    }\n    if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n      return;\n    }\n    focused = false;\n    // TODO FW-2796: find a better way, why 50ms?\n    setTimeout(() => {\n      if (!focused) {\n        active.blur();\n      }\n    }, 50);\n  };\n  addEventListener(doc, 'ionScrollStart', onScroll);\n  doc.addEventListener('focusin', onFocusin, true);\n  doc.addEventListener('touchend', onTouchend, false);\n  return () => {\n    removeEventListener(doc, 'ionScrollStart', onScroll, true);\n    doc.removeEventListener('focusin', onFocusin, true);\n    doc.removeEventListener('touchend', onTouchend, false);\n  };\n};\n\nconst SCROLL_ASSIST_SPEED = 0.3;\nconst getScrollData = (componentEl, contentEl, keyboardHeight) => {\n  var _a;\n  const itemEl = (_a = componentEl.closest('ion-item,[ion-item]')) !== null && _a !== void 0 ? _a : componentEl;\n  return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, componentEl.ownerDocument.defaultView.innerHeight // TODO(FW-2832): type\n  );\n};\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\n  // compute input's Y values relative to the body\n  const inputTop = inputRect.top;\n  const inputBottom = inputRect.bottom;\n  // compute visible area\n  const visibleAreaTop = contentRect.top;\n  const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\n  // compute safe area\n  const safeAreaTop = visibleAreaTop + 15;\n  const safeAreaBottom = visibleAreaBottom * 0.75;\n  // figure out if each edge of the input is within the safe area\n  const distanceToBottom = safeAreaBottom - inputBottom;\n  const distanceToTop = safeAreaTop - inputTop;\n  // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n  const desiredScrollAmount = Math.round(distanceToBottom < 0 ? -distanceToBottom : distanceToTop > 0 ? -distanceToTop : 0);\n  // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n  // gets focus, so make sure we don't scroll the input above the visible area\n  const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n  const distance = Math.abs(scrollAmount);\n  const duration = distance / SCROLL_ASSIST_SPEED;\n  const scrollDuration = Math.min(400, Math.max(150, duration));\n  return {\n    scrollAmount,\n    scrollDuration,\n    scrollPadding: keyboardHeight,\n    inputSafeY: -(inputTop - safeAreaTop) + 4,\n  };\n};\n\nconst enableScrollAssist = (componentEl, inputEl, contentEl, footerEl, keyboardHeight, disableClonedInput = false) => {\n  let coord;\n  const touchStart = (ev) => {\n    coord = pointerCoord(ev);\n  };\n  const touchEnd = (ev) => {\n    // input cover touchend/mouseup\n    if (!coord) {\n      return;\n    }\n    // get where the touchend/mouseup ended\n    const endCoord = pointerCoord(ev);\n    // focus this input if the pointer hasn't moved XX pixels\n    // and the input doesn't already have focus\n    if (!hasPointerMoved(6, coord, endCoord) && !isFocused(inputEl)) {\n      // begin the input focus process\n      jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight, disableClonedInput);\n    }\n  };\n  componentEl.addEventListener('touchstart', touchStart, { capture: true, passive: true });\n  componentEl.addEventListener('touchend', touchEnd, true);\n  return () => {\n    componentEl.removeEventListener('touchstart', touchStart, true);\n    componentEl.removeEventListener('touchend', touchEnd, true);\n  };\n};\nconst jsSetFocus = async (componentEl, inputEl, contentEl, footerEl, keyboardHeight, disableClonedInput = false) => {\n  if (!contentEl && !footerEl) {\n    return;\n  }\n  const scrollData = getScrollData(componentEl, (contentEl || footerEl), keyboardHeight);\n  if (contentEl && Math.abs(scrollData.scrollAmount) < 4) {\n    // the text input is in a safe position that doesn't\n    // require it to be scrolled into view, just set focus now\n    inputEl.focus();\n    return;\n  }\n  // temporarily move the focus to the focus holder so the browser\n  // doesn't freak out while it's trying to get the input in place\n  // at this point the native text input still does not have focus\n  relocateInput(componentEl, inputEl, true, scrollData.inputSafeY, disableClonedInput);\n  inputEl.focus();\n  /**\n   * Relocating/Focusing input causes the\n   * click event to be cancelled, so\n   * manually fire one here.\n   */\n  raf(() => componentEl.click());\n  if (typeof window !== 'undefined') {\n    let scrollContentTimeout;\n    const scrollContent = async () => {\n      // clean up listeners and timeouts\n      if (scrollContentTimeout !== undefined) {\n        clearTimeout(scrollContentTimeout);\n      }\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.removeEventListener('ionKeyboardDidShow', scrollContent);\n      // scroll the input into place\n      if (contentEl) {\n        await scrollByPoint(contentEl, 0, scrollData.scrollAmount, scrollData.scrollDuration);\n      }\n      // the scroll view is in the correct position now\n      // give the native text input focus\n      relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n      // ensure this is the focused input\n      inputEl.focus();\n    };\n    const doubleKeyboardEventListener = () => {\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.addEventListener('ionKeyboardDidShow', scrollContent);\n    };\n    if (contentEl) {\n      const scrollEl = await getScrollElement(contentEl);\n      /**\n       * scrollData will only consider the amount we need\n       * to scroll in order to properly bring the input\n       * into view. It will not consider the amount\n       * we can scroll in the content element.\n       * As a result, scrollData may request a greater\n       * scroll position than is currently available\n       * in the DOM. If this is the case, we need to\n       * wait for the webview to resize/the keyboard\n       * to show in order for additional scroll\n       * bandwidth to become available.\n       */\n      const totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\n      if (scrollData.scrollAmount > totalScrollAmount - scrollEl.scrollTop) {\n        /**\n         * On iOS devices, the system will show a \"Passwords\" bar above the keyboard\n         * after the initial keyboard is shown. This prevents the webview from resizing\n         * until the \"Passwords\" bar is shown, so we need to wait for that to happen first.\n         */\n        if (inputEl.type === 'password') {\n          // Add 50px to account for the \"Passwords\" bar\n          scrollData.scrollAmount += 50;\n          window.addEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n        }\n        else {\n          window.addEventListener('ionKeyboardDidShow', scrollContent);\n        }\n        /**\n         * This should only fire in 2 instances:\n         * 1. The app is very slow.\n         * 2. The app is running in a browser on an old OS\n         * that does not support Ionic Keyboard Events\n         */\n        scrollContentTimeout = setTimeout(scrollContent, 1000);\n        return;\n      }\n    }\n    scrollContent();\n  }\n};\nconst hasPointerMoved = (threshold, startCoord, endCoord) => {\n  if (startCoord && endCoord) {\n    const deltaX = startCoord.x - endCoord.x;\n    const deltaY = startCoord.y - endCoord.y;\n    const distance = deltaX * deltaX + deltaY * deltaY;\n    return distance > threshold * threshold;\n  }\n  return false;\n};\n\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\nconst enableScrollPadding = (keyboardHeight) => {\n  const doc = document;\n  // TODO(FW-2832): types\n  const onFocusin = (ev) => {\n    setScrollPadding(ev.target, keyboardHeight);\n  };\n  const onFocusout = (ev) => {\n    setScrollPadding(ev.target, 0);\n  };\n  doc.addEventListener('focusin', onFocusin);\n  doc.addEventListener('focusout', onFocusout);\n  return () => {\n    doc.removeEventListener('focusin', onFocusin);\n    doc.removeEventListener('focusout', onFocusout);\n  };\n};\nconst setScrollPadding = (input, keyboardHeight) => {\n  var _a, _b;\n  if (input.tagName !== 'INPUT') {\n    return;\n  }\n  if (input.parentElement && input.parentElement.tagName === 'ION-INPUT') {\n    return;\n  }\n  if (((_b = (_a = input.parentElement) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.tagName) === 'ION-SEARCHBAR') {\n    return;\n  }\n  const el = findClosestIonContent(input);\n  if (el === null) {\n    return;\n  }\n  const timer = el[PADDING_TIMER_KEY];\n  if (timer) {\n    clearTimeout(timer);\n  }\n  if (keyboardHeight > 0) {\n    el.style.setProperty('--keyboard-offset', `${keyboardHeight}px`);\n  }\n  else {\n    el[PADDING_TIMER_KEY] = setTimeout(() => {\n      el.style.setProperty('--keyboard-offset', '0px');\n    }, 120);\n  }\n};\n\nconst INPUT_BLURRING = true;\nconst SCROLL_PADDING = true;\nconst startInputShims = (config, platform) => {\n  const doc = document;\n  const isIOS = platform === 'ios';\n  const isAndroid = platform === 'android';\n  /**\n   * Hide Caret and Input Blurring are needed on iOS.\n   * Scroll Assist and Scroll Padding are needed on iOS and Android\n   * with Chrome web browser (not Chrome webview).\n   */\n  const keyboardHeight = config.getNumber('keyboardHeight', 290);\n  const scrollAssist = config.getBoolean('scrollAssist', true);\n  const hideCaret = config.getBoolean('hideCaretOnScroll', isIOS);\n  const inputBlurring = config.getBoolean('inputBlurring', isIOS);\n  const scrollPadding = config.getBoolean('scrollPadding', true);\n  const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n  const hideCaretMap = new WeakMap();\n  const scrollAssistMap = new WeakMap();\n  const registerInput = async (componentEl) => {\n    await new Promise((resolve) => componentOnReady(componentEl, resolve));\n    const inputRoot = componentEl.shadowRoot || componentEl;\n    const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\n    const scrollEl = findClosestIonContent(componentEl);\n    const footerEl = !scrollEl ? componentEl.closest('ion-footer') : null;\n    if (!inputEl) {\n      return;\n    }\n    if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n      const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n      hideCaretMap.set(componentEl, rmFn);\n    }\n    /**\n     * date/datetime-locale inputs on mobile devices show date picker\n     * overlays instead of keyboards. As a result, scroll assist is\n     * not needed. This also works around a bug in iOS <16 where\n     * scroll assist causes the browser to lock up. See FW-1997.\n     */\n    const isDateInput = inputEl.type === 'date' || inputEl.type === 'datetime-local';\n    if (!isDateInput &&\n      (!!scrollEl || !!footerEl) &&\n      scrollAssist &&\n      !scrollAssistMap.has(componentEl)) {\n      const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight, isAndroid);\n      scrollAssistMap.set(componentEl, rmFn);\n    }\n  };\n  const unregisterInput = (componentEl) => {\n    if (hideCaret) {\n      const fn = hideCaretMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      hideCaretMap.delete(componentEl);\n    }\n    if (scrollAssist) {\n      const fn = scrollAssistMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      scrollAssistMap.delete(componentEl);\n    }\n  };\n  if (inputBlurring && INPUT_BLURRING) {\n    enableInputBlurring();\n  }\n  if (scrollPadding && SCROLL_PADDING) {\n    enableScrollPadding(keyboardHeight);\n  }\n  // Input might be already loaded in the DOM before ion-device-hacks did.\n  // At this point we need to look for all of the inputs not registered yet\n  // and register them.\n  for (const input of inputs) {\n    registerInput(input);\n  }\n  // TODO(FW-2832): types\n  doc.addEventListener('ionInputDidLoad', ((ev) => {\n    registerInput(ev.detail);\n  }));\n  doc.addEventListener('ionInputDidUnload', ((ev) => {\n    unregisterInput(ev.detail);\n  }));\n};\n\nexport { startInputShims };\n"],"names":["ION_CONTENT_ELEMENT_SELECTOR","ION_CONTENT_CLASS_SELECTOR","ION_CONTENT_SELECTOR","isIonContent","el","tagName","getScrollElement","async","Promise","resolve","componentOnReady","findClosestIonContent","closest","scrollToTop","durationMs","scrollTo","top","left","behavior","scrollByPoint","x","y","scrollBy","cloneMap","WeakMap","relocateInput","componentEl","inputEl","shouldRelocate","inputRelativeY","arguments","length","undefined","disabledClonedInput","has","addClone","removeClone","isFocused","input","getRootNode","activeElement","parentEl","parentNode","clonedEl","cloneNode","classList","add","tabIndex","disabled","appendChild","set","tx","ownerDocument","dir","style","pointerEvents","transform","clone","get","delete","remove","SKIP_SELECTOR","calcScrollData","inputRect","contentRect","keyboardHeight","platformHeight","inputTop","inputBottom","bottom","visibleAreaTop","safeAreaTop","distanceToBottom","Math","min","distanceToTop","desiredScrollAmount","round","scrollAmount","duration","abs","scrollDuration","max","scrollPadding","inputSafeY","jsSetFocus","contentEl","footerEl","disableClonedInput","scrollData","getScrollData","_a","itemEl","getBoundingClientRect","defaultView","innerHeight","focus","raf","click","window","scrollContentTimeout","scrollContent","clearTimeout","removeEventListener","doubleKeyboardEventListener","addEventListener","scrollEl","totalScrollAmount","scrollHeight","clientHeight","scrollTop","type","setTimeout","hasPointerMoved","threshold","startCoord","endCoord","deltaX","deltaY","PADDING_TIMER_KEY","setScrollPadding","_b","parentElement","timer","setProperty","startInputShims","config","platform","doc","document","isIOS","isAndroid","getNumber","scrollAssist","getBoolean","hideCaret","inputBlurring","inputs","Array","from","querySelectorAll","hideCaretMap","scrollAssistMap","registerInput","inputRoot","shadowRoot","querySelector","rmFn","enableHideCaretOnScroll","scrollHideCaret","shouldHideCaret","onBlur","showCaret","coord","touchStart","ev","pointerCoord","touchEnd","capture","passive","enableScrollAssist","enableInputBlurring","focused","didScroll","onScroll","onFocusin","onTouchend","active","matches","tapped","target","blur","onFocusout","enableScrollPadding","detail","fn","unregisterInput"],"sourceRoot":""}